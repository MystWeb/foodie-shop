<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.myst.web.mapper.ItemsCustomMapper">
    <select id="queryItemComments" resultType="cn.myst.web.pojo.vo.ItemCommentVO">
        SELECT ic.comment_level,
               ic.content,
               ic.sepc_name,
               ic.created_time,
               u.face AS user_face,
               u.nickname
        FROM items_comments AS ic
                     LEFT JOIN users AS u ON ic.user_id = u.id
                WHERE ic.item_id = #{paramsMap.itemId}
        <if test="paramsMap.level != null and paramsMap.level != ''">
            AND ic.comment_level = #{paramsMap.level}
        </if>
    </select>

    <select id="searchItems" resultType="cn.myst.web.pojo.vo.SearchItemsVO">
        SELECT i.id                     AS item_id,
               i.item_name,
               i.sell_counts,
               ii.url                   AS img_url,
               temp_spec.price_discount AS price
        FROM items AS i
                     LEFT JOIN items_img AS ii ON i.id = ii.item_id
                     LEFT JOIN (SELECT item_id, MIN(price_discount) AS price_discount
                                FROM items_spec
                                GROUP BY item_id) AS temp_spec ON i.id = temp_spec.item_id
                WHERE ii.is_main = 1
        <!-- Mybatis的bind 或使用 MySQL的 CONCAT（）函数用于将多个字符串连接成一个字符串-->
        <if test="paramsMap.keywords != null and paramsMap.keywords != ''">
            <bind name="keywords" value="'%' + paramsMap.keywords + '%'"/>
            AND i.item_name LIKE #{keywords}
        </if>
        <!-- 排序 -->
        ORDER BY
        <choose>
            <when test="paramsMap.sort == 'c'.toString()">
                i.sell_counts DESC
            </when>
            <when test="paramsMap.sort == 'p'.toString()">
                <!--@ignoreSql-->
                temp_spec.price_discount ASC
            </when>
            <otherwise>
                <!--@ignoreSql-->
                i.item_name ASC
            </otherwise>
        </choose>
    </select>
    <!--
    k：默认，代表默认排序，根据name
    c：根据销量排序
    p：根据价格排序-->

    <select id="searchItemsByThirdCat" resultType="cn.myst.web.pojo.vo.SearchItemsVO">
        SELECT i.id                     AS item_id,
               i.item_name,
               i.sell_counts,
               ii.url                   AS img_url,
               temp_spec.price_discount AS price
        FROM items AS i
                     LEFT JOIN items_img AS ii ON i.id = ii.item_id
                     LEFT JOIN (SELECT item_id, MIN(price_discount) AS price_discount
                                FROM items_spec
                                GROUP BY item_id) AS temp_spec ON i.id = temp_spec.item_id
        WHERE ii.is_main = 1
          AND i.cat_id = #{paramsMap.catId}
        <!-- 排序 -->
        ORDER BY
        <choose>
            <when test="paramsMap.sort == 'c'.toString()">
                i.sell_counts DESC
            </when>
            <when test="paramsMap.sort == 'p'.toString()">
                <!--@ignoreSql-->
                temp_spec.price_discount ASC
            </when>
            <otherwise>
                <!--@ignoreSql-->
                i.item_name ASC
            </otherwise>
        </choose>
    </select>

    <select id="queryItemsBySpecIds" resultType="cn.myst.web.pojo.vo.ShopcartVO">
        SELECT t_items.id          AS item_id,
               t_items.item_name,
               t_items_img.url     AS item_img_url,
               t_items_spec.id     AS spec_id,
               t_items_spec.`name` AS spec_name,
               t_items_spec.price_discount,
               t_items_spec.price_normal
        FROM items_spec AS t_items_spec
                     LEFT JOIN items AS t_items ON t_items_spec.item_id = t_items.id
                     LEFT JOIN items_img AS t_items_img ON t_items_img.item_id = t_items.id
                WHERE t_items_img.is_main = 1
                  AND t_items_spec.id IN
        <foreach item="item" index="index" collection="idCollection"
                 open="(" separator="," close=")">
            #{item,jdbcType=VARCHAR}
        </foreach>
    </select>

    <update id="decreaseItemSpecStock">
        update items_spec
        set stock = stock - #{pendingCounts,jdbcType=INTEGER}
        where id = #{specId,jdbcType=VARCHAR}
          and stock >= #{pendingCounts,jdbcType=INTEGER}
    </update>
</mapper>